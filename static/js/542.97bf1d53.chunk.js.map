{"version":3,"file":"static/js/542.97bf1d53.chunk.js","mappings":"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","sources":["components/ReviewDeck.js","components/QuestionView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useShortcuts } from '../contexts/ShortcutContext';\nimport QuestionView from './QuestionView';\nimport './ReviewDeck.module.css';\n\nconst ReviewDeck = ({\n  questions,\n  incorrectlyAnsweredQuestions,\n  onAnswerResult, // We can still call this to notify the parent if needed\n  onBackToQuiz,\n  showExplanation,\n  toggleExplanation,\n}) => {\n  const { shortcutExplanation } = useShortcuts();\n  \n  // State to manage the dynamic list of questions for this mastery session\n  const [reviewQueue, setReviewQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  // Initialize the review queue when the component mounts or the initial incorrect list changes\n  useEffect(() => {\n    const initialReviewQuestions = questions.filter(q => \n      incorrectlyAnsweredQuestions.includes(q.id)\n    );\n    setReviewQueue(initialReviewQuestions);\n    setCurrentIndex(0); // Always start from the first question\n  }, [questions, incorrectlyAnsweredQuestions]); // Dependency array ensures this runs only when needed\n\n  // The core logic for mastery mode\n  const handleMasteryAnswer = (questionId, isCorrect) => {\n    // Optionally, notify the parent component about the answer\n    if (onAnswerResult) {\n      onAnswerResult(questionId, isCorrect);\n    }\n\n    if (isCorrect) {\n      // ✅ Correct answer: Remove the question from the queue.\n      const newQueue = reviewQueue.filter(q => q.id !== questionId);\n      \n      // If we remove the last item, the index needs to be capped.\n      // Math.min prevents the index from going out of bounds.\n      setCurrentIndex(prevIndex => Math.min(prevIndex, newQueue.length - 1));\n      setReviewQueue(newQueue);\n    } else {\n      // ❌ Incorrect answer: Move to the next question in the queue.\n      // The question stays in the list. We use modulo to loop back to the start.\n      setCurrentIndex(prevIndex => (prevIndex + 1) % reviewQueue.length);\n    }\n  };\n\n  // Effect for keyboard shortcuts (simplified without Next/Prev)\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === shortcutExplanation || (shortcutExplanation === ' ' && e.code === 'Space')) {\n        toggleExplanation();\n      }\n      if (e.key === 'Escape') {\n        onBackToQuiz();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [shortcutExplanation, toggleExplanation, onBackToQuiz]);\n\n\n  // When the queue is empty, the user has mastered all questions.\n  if (reviewQueue.length === 0) {\n    return (\n      <div className=\"review-deck-container\">\n        <h2>✨ გილოცავთ!</h2>\n        <p>თქვენ წარმატებით უპასუხეთ ყველა მანამდე შეცდომით ნაპასუხებ კითხვას.</p>\n        <button onClick={onBackToQuiz}>🔙 დაბრუნება სწავლის რეჟიმზე</button>\n      </div>\n    );\n  }\n\n  // Get the current question from our dynamic queue\n  const currentQuestion = reviewQueue[currentIndex];\n\n  return (\n    <div className=\"review-deck-container\">\n      {/* The title now shows the number of remaining questions */}\n      <h2>🧠 \"დამხეცების\" რეჟიმი ({reviewQueue.length} კითხვა დარჩა)</h2>\n      \n      <QuestionView\n        question={currentQuestion}\n        // Pass our new handler to the QuestionView\n        onAnswerResult={handleMasteryAnswer} \n        showExplanation={showExplanation}\n        toggleExplanation={toggleExplanation}\n      />\n      \n      <div className=\"navigation\">\n        {/* Navigation is now simplified, as answering drives progress */}\n        <button onClick={onBackToQuiz}>🔙 გასვლა</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewDeck;","import React, { useState, useEffect, memo, useRef } from 'react';\nimport './QuestionView.css';\n\nconst QuestionView = ({ question, onAnswerResult, showExplanation, toggleExplanation }) => {\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const explanationRef = useRef(null);\n\n  useEffect(() => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n  }, [question]);\n\n  useEffect(() => {\n    if (showExplanation && explanationRef.current) {\n      explanationRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  }, [showExplanation]);\n\n  const handleAnswerClick = (answer) => {\n    // This guard prevents the user from changing their answer or re-submitting.\n    if (isAnswered) return;\n\n    setSelectedAnswer(answer);\n    setIsAnswered(true);\n    if (onAnswerResult) {\n      onAnswerResult(question.id, answer.isCorrect);\n    }\n  };\n\n  const handleToggleExplanation = (e) => {\n    e.stopPropagation();\n    toggleExplanation();\n  };\n\n  // --- MODIFIED FUNCTION ---\n  const getButtonClassName = (answer) => {\n    if (isAnswered) {\n      if (answer.isCorrect) return \"answer-button correct\";\n      if (selectedAnswer === answer && !answer.isCorrect) return \"answer-button incorrect\";\n    }\n    // All other buttons (before answering or non-relevant ones after) get the default class.\n    return \"answer-button\";\n  };\n  \n  return (\n    <div className=\"question-card\">\n      <h2 className=\"question-text\">❓ {question.question}</h2>\n      <div className=\"answers-container\">\n        {question.answers.map((answer, index) => (\n          <button\n            key={index}\n            className={getButtonClassName(answer)}\n            onClick={() => handleAnswerClick(answer)}\n          >\n            {answer.text}\n          </button>\n        ))}\n      </div>\n\n      {isAnswered && (\n        <div className=\"explanation-section\" ref={explanationRef}>\n          <button className=\"explanation-toggle\" onClick={handleToggleExplanation}>\n            {showExplanation ? '🙈 ახსნის დამალვა' : '📖 ახსნის ნახვა'}\n          </button>\n          {showExplanation && (\n            <p className=\"explanation-text\">ℹ️ {question.explanation}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(QuestionView);"],"names":["_ref","questions","incorrectlyAnsweredQuestions","onAnswerResult","onBackToQuiz","showExplanation","toggleExplanation","shortcutExplanation","useShortcuts","reviewQueue","setReviewQueue","useState","currentIndex","setCurrentIndex","useEffect","initialReviewQuestions","filter","q","includes","id","handleKeyDown","e","key","code","window","addEventListener","removeEventListener","length","_jsxs","className","children","_jsx","onClick","currentQuestion","QuestionView","question","handleMasteryAnswer","questionId","isCorrect","newQueue","prevIndex","Math","min","selectedAnswer","setSelectedAnswer","isAnswered","setIsAnswered","explanationRef","useRef","current","scrollIntoView","behavior","block","getButtonClassName","answer","answers","map","index","handleAnswerClick","text","ref","stopPropagation","explanation","memo"],"sourceRoot":""}