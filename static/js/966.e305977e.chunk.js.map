{"version":3,"file":"static/js/966.e305977e.chunk.js","mappings":"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","sources":["components/SettingsPopover.js","hooks/useTheme.js"],"sourcesContent":["import React, { useState } from 'react';\nimport useTheme from '../hooks/useTheme';\nimport { useShortcuts } from '../contexts/ShortcutContext';\nimport './Settings.css';\n\nexport default function SettingsPopover() {\n  const [open, setOpen] = useState(false);\n  const { isDarkMode, setIsDarkMode, fontSize, setFontSize } = useTheme();\n  const {\n    shortcutPrev, setShortcutPrev,\n    shortcutNext, setShortcutNext,\n    shortcutExplanation, setShortcutExplanation\n  } = useShortcuts();\n\n  const toggleDarkMode = () => setIsDarkMode(prev => !prev);\n  const increaseFontSize = () => setFontSize(prev => Math.min(prev + 1, 22));\n  const decreaseFontSize = () => setFontSize(prev => Math.max(prev - 1, 12));\n  const handleShortcutChange = (e, setter) => {\n    setter(e.target.value.toLowerCase() === 'space' ? ' ' : e.target.value);\n  };\n\n  return (\n    <div className=\"settings-popover\">\n      <button className=\"settings-button\" onClick={() => setOpen(o => !o)} aria-label=\"Open Settings\">\n        ⚙️\n      </button>\n\n      {open && (\n        <div className=\"settings-dropdown\">\n          <button className=\"settings-close-button\" onClick={() => setOpen(false)} aria-label=\"Close Settings\">✖️</button>\n          <h2>⚙️ პარამეტრები</h2>\n\n          <div className=\"setting-item\">\n            <span>🌙 ბნელი რეჟიმი</span>\n            <label className=\"switch\">\n              <input type=\"checkbox\" checked={isDarkMode} onChange={toggleDarkMode} />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n          <div className=\"setting-item\">\n            <span>🔠 შრიფტის ზომა: {fontSize}px</span>\n            <div className=\"font-size-controls\">\n              <button onClick={decreaseFontSize} disabled={fontSize <= 12}>A-</button>\n              <button onClick={increaseFontSize} disabled={fontSize >= 22}>A+</button>\n            </div>\n          </div>\n          <div className=\"setting-item\">\n            <span>⌨️ კლავიატურის მარშრუტები</span>\n            <div className=\"shortcut-setting\">\n              <label>◀️ წინა კითხვა:\n                <input\n                  type=\"text\"\n                  maxLength={20}\n                  value={shortcutPrev}\n                  onChange={(e) => handleShortcutChange(e, setShortcutPrev)}\n                />\n              </label>\n            </div>\n            <div className=\"shortcut-setting\">\n              <label>▶️ შემდეგი კითხვა:\n                <input\n                  type=\"text\"\n                  maxLength={20}\n                  value={shortcutNext}\n                  onChange={(e) => handleShortcutChange(e, setShortcutNext)}\n                />\n              </label>\n            </div>\n            <div className=\"shortcut-setting\">\n              <label>📖 ახსნის ჩვენება:\n                <input\n                  type=\"text\"\n                  maxLength={20}\n                  value={shortcutExplanation === ' ' ? 'Space' : shortcutExplanation}\n                  onChange={(e) => handleShortcutChange(e, setShortcutExplanation)}\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useEffect } from 'react';\r\nimport useLocalStorage from './useLocalStorage';\r\n\r\nexport default function useTheme() {\r\n  const [isDarkMode, setIsDarkMode] = useLocalStorage('darkMode', false);\r\n  const [fontSize, setFontSize] = useLocalStorage('fontSize', 16);\r\n\r\n  useEffect(() => {\r\n    document.documentElement.classList.toggle('dark-mode', isDarkMode);\r\n  }, [isDarkMode]);\r\n\r\n  useEffect(() => {\r\n    document.documentElement.style.fontSize = `${fontSize}px`;\r\n  }, [fontSize]);\r\n\r\n  return { isDarkMode, setIsDarkMode, fontSize, setFontSize };\r\n}"],"names":["SettingsPopover","open","setOpen","useState","isDarkMode","setIsDarkMode","fontSize","setFontSize","useLocalStorage","useEffect","document","documentElement","classList","toggle","style","concat","useTheme","shortcutPrev","setShortcutPrev","shortcutNext","setShortcutNext","shortcutExplanation","setShortcutExplanation","useShortcuts","handleShortcutChange","e","setter","target","value","toLowerCase","_jsxs","className","children","_jsx","onClick","o","type","checked","onChange","toggleDarkMode","prev","decreaseFontSize","Math","max","disabled","increaseFontSize","min","maxLength"],"sourceRoot":""}