{"version":3,"file":"static/js/770.85800751.chunk.js","mappings":"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","sources":["components/ReviewDeck.js","components/QuestionView.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useShortcuts } from '../contexts/ShortcutContext';\nimport QuestionView from './QuestionView';\nimport './ReviewDeck.css';\n\nconst ReviewDeck = ({\n  questions,\n  incorrectlyAnsweredQuestions,\n  onAnswerResult,\n  onBackToQuiz,\n  showExplanation,\n  toggleExplanation,\n}) => {\n  const { shortcutPrev, shortcutNext, shortcutExplanation } = useShortcuts();\n  const [currentReviewIndex, setCurrentReviewIndex] = useState(0);\n\n  const reviewQuestions = questions.filter(q => incorrectlyAnsweredQuestions.includes(q.id));\n\n  useEffect(() => {\n    setCurrentReviewIndex(0);\n  }, [incorrectlyAnsweredQuestions]);\n\n  const handleNext = useCallback(() => {\n    setCurrentReviewIndex(prev => Math.min(prev + 1, reviewQuestions.length - 1));\n  }, [reviewQuestions.length]);\n\n  const handlePrevious = useCallback(() => {\n    setCurrentReviewIndex(prev => Math.max(prev - 1, 0));\n  }, []);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === shortcutNext) handleNext();\n      if (e.key === shortcutPrev) handlePrevious();\n      if (e.key === shortcutExplanation || (shortcutExplanation === ' ' && e.code === 'Space')) {\n        toggleExplanation();\n      }\n      if (e.key === 'Escape') {\n        onBackToQuiz();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [shortcutPrev, shortcutNext, shortcutExplanation, handleNext, handlePrevious, toggleExplanation, onBackToQuiz]);\n\n  // ---- THIS BLOCK MUST BE INSIDE THE FUNCTION ----\n  if (reviewQuestions.length === 0) {\n    return (\n      <div className=\"review-deck-container\">\n        <h2>🚫 არ არის კითხვები გადასახედად</h2>\n        <button onClick={onBackToQuiz}>🔙 დაბრუნება ქვიზზე</button>\n      </div>\n    );\n  }\n  // ------------------------------------------------\n\n  return (\n    <div className=\"review-deck-container\">\n      <h2>🔁 გადახედვა ({currentReviewIndex + 1} / {reviewQuestions.length})</h2>\n      <QuestionView\n        question={reviewQuestions[currentReviewIndex]}\n        onAnswerResult={onAnswerResult}\n        showExplanation={showExplanation}\n        toggleExplanation={toggleExplanation}\n      />\n      <div className=\"navigation\">\n        <button onClick={handlePrevious} disabled={currentReviewIndex === 0}>\n          ◀️ წინა\n        </button>\n        <button onClick={handleNext} disabled={currentReviewIndex === reviewQuestions.length - 1}>\n          ▶️ შემდეგი\n        </button>\n        <button onClick={onBackToQuiz}>🔙 დაბრუნება ქვიზზე</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewDeck;\n","import React, { useState, useEffect, memo, useRef } from 'react';\nimport './QuestionView.css';\n\nconst QuestionView = ({ question, onAnswerResult, showExplanation, toggleExplanation }) => {\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const explanationRef = useRef(null);\n\n  useEffect(() => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n  }, [question]);\n\n  const handleAnswerClick = (answer) => {\n    if (isAnswered) return;\n\n    setSelectedAnswer(answer);\n    setIsAnswered(true);\n\n    if (onAnswerResult) {\n      onAnswerResult(question.id, answer.isCorrect);\n    }\n  };\n\n  const getButtonClassName = (answer) => {\n    if (!isAnswered) return \"answer-button\";\n    if (answer.isCorrect) return \"answer-button correct\";\n    if (selectedAnswer === answer && !answer.isCorrect) return \"answer-button incorrect\";\n    return \"answer-button disabled\";\n  };\n\n  const handleToggleExplanation = (e) => {\n    e.stopPropagation();\n    toggleExplanation();\n    if (!showExplanation) {\n      setTimeout(() => {\n        explanationRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n  };\n\n  return (\n    <div className=\"question-card\" onClick={toggleExplanation}>\n      <h2 className=\"question-text\">❓ {question.question}</h2>\n      <div className=\"answers-container\">\n        {question.answers.map((answer, index) => (\n          <button\n            key={index}\n            className={getButtonClassName(answer)}\n            onClick={() => handleAnswerClick(answer)}\n            disabled={isAnswered}\n          >\n            {answer.text}\n          </button>\n        ))}\n      </div>\n\n      {isAnswered && (\n        <div className=\"explanation-section\" ref={explanationRef}>\n          <button className=\"explanation-toggle\" onClick={handleToggleExplanation}>\n            {showExplanation ? '🙈 ახსნის დამალვა' : '📖 ახსნის ნახვა'}\n          </button>\n          {showExplanation && (\n            <p className=\"explanation-text\">ℹ️ {question.explanation}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(QuestionView);\n"],"names":["_ref","questions","incorrectlyAnsweredQuestions","onAnswerResult","onBackToQuiz","showExplanation","toggleExplanation","shortcutPrev","shortcutNext","shortcutExplanation","useShortcuts","currentReviewIndex","setCurrentReviewIndex","useState","reviewQuestions","filter","q","includes","id","useEffect","handleNext","useCallback","prev","Math","min","length","handlePrevious","max","handleKeyDown","e","key","code","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","onClick","QuestionView","question","disabled","selectedAnswer","setSelectedAnswer","isAnswered","setIsAnswered","explanationRef","useRef","getButtonClassName","answer","isCorrect","answers","map","index","handleAnswerClick","text","ref","stopPropagation","setTimeout","_explanationRef$curre","current","scrollIntoView","behavior","block","explanation","memo"],"sourceRoot":""}