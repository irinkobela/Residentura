{"version":3,"file":"static/js/542.b5e20425.chunk.js","mappings":"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","sources":["components/ReviewDeck.js","components/QuestionView.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useShortcuts } from '../contexts/ShortcutContext';\nimport QuestionView from './QuestionView';\nimport './ReviewDeck.module.css';\n\nconst ReviewDeck = ({\n  questions,\n  incorrectlyAnsweredQuestions,\n  onAnswerResult,\n  onBackToQuiz,\n  showExplanation,\n  toggleExplanation,\n  clearIncorrectlyAnsweredQuestions,\n}) => {\n  const { shortcutPrev, shortcutNext, shortcutExplanation } = useShortcuts();\n\n  const [reviewQueue, setReviewQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    const initialQueue = questions.filter(q => incorrectlyAnsweredQuestions.includes(q.id));\n    setReviewQueue(initialQueue);\n    setCurrentIndex(0);\n  }, [questions, incorrectlyAnsweredQuestions]);\n\n  const handleNext = useCallback(() => {\n    setCurrentIndex(prev => Math.min(prev + 1, reviewQueue.length - 1));\n  }, [reviewQueue.length]);\n\n  const handlePrevious = useCallback(() => {\n    setCurrentIndex(prev => Math.max(prev - 1, 0));\n  }, []);\n\n  const handleMasteryAnswer = (questionId, isCorrect) => {\n    if (onAnswerResult) {\n      onAnswerResult(questionId, isCorrect);\n    }\n    if (isCorrect) {\n      const newQueue = reviewQueue.filter(q => q.id !== questionId);\n      setReviewQueue(newQueue);\n      setCurrentIndex(prevIndex => Math.min(prevIndex, newQueue.length - 1));\n    } else {\n      setCurrentIndex(prevIndex => (prevIndex + 1) % reviewQueue.length);\n    }\n  };\n\n  // FIX: Wrap handleBackToQuiz in useCallback and define it before useEffect\n  const handleBackToQuiz = useCallback(() => {\n    if (clearIncorrectlyAnsweredQuestions) {\n      clearIncorrectlyAnsweredQuestions();\n    }\n    onBackToQuiz();\n  }, [clearIncorrectlyAnsweredQuestions, onBackToQuiz]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === shortcutNext) handleNext();\n      if (e.key === shortcutPrev) handlePrevious();\n      if (e.key === shortcutExplanation || (shortcutExplanation === ' ' && e.code === 'Space')) {\n        toggleExplanation();\n      }\n      if (e.key === 'Escape') {\n        handleBackToQuiz();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [\n    shortcutPrev,\n    shortcutNext,\n    shortcutExplanation,\n    handleNext,\n    handlePrevious,\n    toggleExplanation,\n    handleBackToQuiz\n  ]);\n\n  if (reviewQueue.length === 0) {\n    return (\n      <div className=\"review-deck-container\">\n        <h2>✨ გილოცავთ!</h2>\n        <p>თქვენ წარმატებით უპასუხეთ ყველა მანამდე შეცდომით ნაპასუხებ კითხვას.</p>\n        <button onClick={handleBackToQuiz}>🔙 დაბრუნება სწავლის რეჟიმზე</button>\n      </div>\n    );\n  }\n\n  const currentQuestion = reviewQueue[currentIndex];\n\n  return (\n    <div className=\"review-deck-container\">\n      <h2>🧠 \"დამხეცების\" რეჟიმი ({reviewQueue.length} კითხვა დარჩა)</h2>\n      <QuestionView\n        question={currentQuestion}\n        onAnswerResult={handleMasteryAnswer}\n        showExplanation={showExplanation}\n        toggleExplanation={toggleExplanation}\n        alwaysShowCorrectAnswer={true}\n      />\n      <div className=\"navigation\">\n        <button onClick={handlePrevious} disabled={currentIndex === 0}>\n          ◀️ წინა\n        </button>\n        <button onClick={handleNext} disabled={currentIndex === reviewQueue.length - 1}>\n          ▶️ შემდეგი\n        </button>\n        <button onClick={handleBackToQuiz}>🔙 დაბრუნება სწავლის რეჟიმზე</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewDeck;","import React, { useState, useEffect, memo, useRef } from 'react';\nimport './QuestionView.css';\n\nconst QuestionView = ({\n  question,\n  onAnswerResult,\n  showExplanation,\n  toggleExplanation,\n  alwaysShowCorrectAnswer \n}) => {\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const explanationRef = useRef(null);\n\n  useEffect(() => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n  }, [question]);\n\n  useEffect(() => {\n    if (showExplanation && explanationRef.current) {\n      explanationRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  }, [showExplanation]);\n\n  const handleAnswerClick = (answer) => {\n    if (isAnswered) return;\n    setSelectedAnswer(answer);\n    setIsAnswered(true);\n    if (onAnswerResult) {\n      onAnswerResult(question.id, answer.isCorrect);\n    }\n  };\n\n  const handleToggleExplanation = (e) => {\n    e.stopPropagation();\n    toggleExplanation();\n  };\n\n  const getButtonClassName = (answer) => {\n    if (isAnswered) {\n      if (answer.isCorrect) return \"answer-button correct\";\n      if (selectedAnswer === answer && !answer.isCorrect) return \"answer-button incorrect\";\n    }\n    return \"answer-button\";\n  };\n\n  // Find the correct answer text for display\n  const correctAnswerText = question.answers.find(a => a.isCorrect)?.text;\n\n  return (\n    <div className=\"question-card\">\n      <h2 className=\"question-text\">❓ {question.question}</h2>\n      <div className=\"answers-container\">\n        {question.answers.map((answer, index) => (\n          <button\n            key={index}\n            className={getButtonClassName(answer)}\n            onClick={() => handleAnswerClick(answer)}\n            disabled={isAnswered}\n          >\n            {answer.text}\n          </button>\n        ))}\n      </div>\n\n      {isAnswered && (\n        <div className=\"correct-answer-section\">\n          <p className=\"correct-answer-text\">\n            ✅ სწორი პასუხია: <strong>{correctAnswerText}</strong>\n          </p>\n        </div>\n      )}\n\n      {isAnswered && (\n        <div className=\"explanation-section\" ref={explanationRef}>\n          <button className=\"explanation-toggle\" onClick={handleToggleExplanation}>\n            {showExplanation ? '🙈 ახსნის დამალვა' : '📖 ახსნის ნახვა'}\n          </button>\n          {showExplanation && (\n            <p className=\"explanation-text\">ℹ️ {question.explanation}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(QuestionView);"],"names":["_ref","questions","incorrectlyAnsweredQuestions","onAnswerResult","onBackToQuiz","showExplanation","toggleExplanation","clearIncorrectlyAnsweredQuestions","shortcutPrev","shortcutNext","shortcutExplanation","useShortcuts","reviewQueue","setReviewQueue","useState","currentIndex","setCurrentIndex","useEffect","initialQueue","filter","q","includes","id","handleNext","useCallback","prev","Math","min","length","handlePrevious","max","handleBackToQuiz","handleKeyDown","e","key","code","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","onClick","currentQuestion","QuestionView","question","handleMasteryAnswer","questionId","isCorrect","newQueue","prevIndex","alwaysShowCorrectAnswer","disabled","_question$answers$fin","selectedAnswer","setSelectedAnswer","isAnswered","setIsAnswered","explanationRef","useRef","current","scrollIntoView","behavior","block","getButtonClassName","answer","correctAnswerText","answers","find","a","text","map","index","handleAnswerClick","ref","stopPropagation","explanation","memo"],"sourceRoot":""}