{"version":3,"file":"static/js/803.37db0c53.chunk.js","mappings":"mKAGA,MAAMA,EAAeC,IAAuE,IAAtE,SAAEC,EAAQ,eAAEC,EAAc,gBAAEC,EAAe,kBAAEC,GAAmBJ,EACpF,MAAOK,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,OAC9CC,EAAYC,IAAiBF,EAAAA,EAAAA,WAAS,GACvCG,GAAiBC,EAAAA,EAAAA,QAAO,OAE9BC,EAAAA,EAAAA,WAAU,KACRN,EAAkB,MAClBG,GAAc,IACb,CAACR,IAEJ,MAWMY,EAAsBC,GACrBN,EACDM,EAAOC,UAAkB,wBACzBV,IAAmBS,GAAWA,EAAOC,UAClC,yBADoD,0BAFnC,gBAgB1B,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgBC,QAASd,EAAkBe,SAAA,EACxDH,EAAAA,EAAAA,MAAA,MAAIC,UAAU,gBAAeE,SAAA,CAAC,UAAGlB,EAASA,aAC1CmB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,oBAAmBE,SAC/BlB,EAASoB,QAAQC,IAAI,CAACR,EAAQS,KAC7BH,EAAAA,EAAAA,KAAA,UAEEH,UAAWJ,EAAmBC,GAC9BI,QAASA,IApCQJ,KACrBN,IAEJF,EAAkBQ,GAClBL,GAAc,GAEVP,GACFA,EAAeD,EAASuB,GAAIV,EAAOC,aA6BdU,CAAkBX,GACjCY,SAAUlB,EAAWW,SAEpBL,EAAOa,MALHJ,MAUVf,IACCQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAsBW,IAAKlB,EAAeS,SAAA,EACvDC,EAAAA,EAAAA,KAAA,UAAQH,UAAU,qBAAqBC,QA5BdW,IAC/BA,EAAEC,kBACF1B,IACKD,GACH4B,WAAW,KAAO,IAADC,EACO,QAAtBA,EAAAtB,EAAeuB,eAAO,IAAAD,GAAtBA,EAAwBE,eAAe,CAAEC,SAAU,SAAUC,MAAO,WACnE,MAsByEjB,SACrEhB,EAAkB,+FAAsB,qFAE1CA,IACCa,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mBAAkBE,SAAA,CAAC,gBAAIlB,EAASoC,sBAQzD,GAAeC,EAAAA,EAAAA,MAAKvC,E","sources":["components/QuestionView.js"],"sourcesContent":["import React, { useState, useEffect, memo, useRef } from 'react';\nimport './QuestionView.css';\n\nconst QuestionView = ({ question, onAnswerResult, showExplanation, toggleExplanation }) => {\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const explanationRef = useRef(null);\n\n  useEffect(() => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n  }, [question]);\n\n  const handleAnswerClick = (answer) => {\n    if (isAnswered) return;\n\n    setSelectedAnswer(answer);\n    setIsAnswered(true);\n\n    if (onAnswerResult) {\n      onAnswerResult(question.id, answer.isCorrect);\n    }\n  };\n\n  const getButtonClassName = (answer) => {\n    if (!isAnswered) return \"answer-button\";\n    if (answer.isCorrect) return \"answer-button correct\";\n    if (selectedAnswer === answer && !answer.isCorrect) return \"answer-button incorrect\";\n    return \"answer-button disabled\";\n  };\n\n  const handleToggleExplanation = (e) => {\n    e.stopPropagation();\n    toggleExplanation();\n    if (!showExplanation) {\n      setTimeout(() => {\n        explanationRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n  };\n\n  return (\n    <div className=\"question-card\" onClick={toggleExplanation}>\n      <h2 className=\"question-text\">❓ {question.question}</h2>\n      <div className=\"answers-container\">\n        {question.answers.map((answer, index) => (\n          <button\n            key={index}\n            className={getButtonClassName(answer)}\n            onClick={() => handleAnswerClick(answer)}\n            disabled={isAnswered}\n          >\n            {answer.text}\n          </button>\n        ))}\n      </div>\n\n      {isAnswered && (\n        <div className=\"explanation-section\" ref={explanationRef}>\n          <button className=\"explanation-toggle\" onClick={handleToggleExplanation}>\n            {showExplanation ? '🙈 ახსნის დამალვა' : '📖 ახსნის ნახვა'}\n          </button>\n          {showExplanation && (\n            <p className=\"explanation-text\">ℹ️ {question.explanation}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(QuestionView);\n"],"names":["QuestionView","_ref","question","onAnswerResult","showExplanation","toggleExplanation","selectedAnswer","setSelectedAnswer","useState","isAnswered","setIsAnswered","explanationRef","useRef","useEffect","getButtonClassName","answer","isCorrect","_jsxs","className","onClick","children","_jsx","answers","map","index","id","handleAnswerClick","disabled","text","ref","e","stopPropagation","setTimeout","_explanationRef$curre","current","scrollIntoView","behavior","block","explanation","memo"],"sourceRoot":""}