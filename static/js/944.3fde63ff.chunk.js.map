{"version":3,"file":"static/js/944.3fde63ff.chunk.js","mappings":"uLAGA,MAAMA,EAAoBC,IAInB,IAADC,EAAA,IAJqB,SACzBC,GAGDF,EACC,MAAMG,GAAiBC,EAAAA,EAAAA,QAAO,OAK9BC,EAAAA,EAAAA,WAAU,KAGJF,EAAeG,SACjBH,EAAeG,QAAQC,eAAe,CACpCC,SAAU,SACVC,MAAO,WAGV,CAACP,IAGJ,MAAMQ,EAA2D,QAA1CT,EAAGC,EAASS,QAAQC,KAAKC,GAAKA,EAAEC,kBAAU,IAAAb,OAAA,EAAvCA,EAAyCc,KAEnE,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,gBAAeC,SAAA,CAAC,UAAGhB,EAASA,aAC1CiB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,SAE/BhB,EAASS,QAAQS,IAAI,CAACC,EAAQC,KAC7BH,EAAAA,EAAAA,KAAA,UAEEF,UAAWI,EAAOP,UAAY,wBAA0B,gBAAiBI,SAExEG,EAAON,MAHHO,OASXH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,sBAAqBC,SAAA,CAAC,sFAChBC,EAAAA,EAAAA,KAAA,UAAAD,SAASR,UAK9BS,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAsBM,IAAKpB,EAAee,UACvDF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mBAAkBC,SAAA,CAAC,gBAAIhB,EAASsB,qBAMrD,GAAeC,EAAAA,EAAAA,MAAK1B,E","sources":["components/EasyStudyModeView.js"],"sourcesContent":["import React, { useEffect, memo, useRef } from 'react';\nimport './QuestionView.css'; // Reusing existing CSS\n\nconst EasyStudyModeView = ({\n  question\n  // onAnswerResult prop is no longer strictly needed here if we don't track answers\n  // but keeping it won't hurt if you use it elsewhere for statistics.\n}) => {\n  const explanationRef = useRef(null);\n\n  // In Easy Study Mode, the explanation and correct answer are always visible immediately.\n  // No need for selectedAnswer or isAnswered state within this component.\n\n  useEffect(() => {\n    // Scroll to explanation when a new question loads\n    // This will effectively scroll down on 'Next' or 'Previous'\n    if (explanationRef.current) {\n      explanationRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  }, [question]); // Scroll effect runs every time the question prop changes\n\n  // Find the correct answer text for display\n  const correctAnswerText = question.answers.find(a => a.isCorrect)?.text;\n\n  return (\n    <div className=\"question-card\">\n      <h2 className=\"question-text\">❓ {question.question}</h2>\n      <div className=\"answers-container\">\n        {/* Buttons are just for display now, no interaction needed to reveal answer/explanation */}\n        {question.answers.map((answer, index) => (\n          <button\n            key={index}\n            className={answer.isCorrect ? \"answer-button correct\" : \"answer-button\"} // Highlight correct answer always\n          >\n            {answer.text}\n          </button>\n        ))}\n      </div>\n\n      {/* Correct answer text is always shown */}\n      <div className=\"correct-answer-section\">\n        <p className=\"correct-answer-text\">\n          ✅ სწორი პასუხია: <strong>{correctAnswerText}</strong>\n        </p>\n      </div>\n\n      {/* Explanation section is always shown */}\n      <div className=\"explanation-section\" ref={explanationRef}>\n        <p className=\"explanation-text\">ℹ️ {question.explanation}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EasyStudyModeView);"],"names":["EasyStudyModeView","_ref","_question$answers$fin","question","explanationRef","useRef","useEffect","current","scrollIntoView","behavior","block","correctAnswerText","answers","find","a","isCorrect","text","_jsxs","className","children","_jsx","map","answer","index","ref","explanation","memo"],"sourceRoot":""}